plugins {
    id 'java-library'
    id 'org.openjfx.javafxplugin' version '0.0.14'
}

ext.moduleName = 'qupath.fx'
ext.jdkVersion = 17

archivesBaseName = 'qupath-fx'
description = "Extra classes built on JavaFX that are used to help create the QuPath user interface. " +
        "These don't depend on other QuPath modules, so can be reused elsewhere."

configurations {}

version = '0.1.0-SNAPSHOT'

tasks.named('compileJava') {
    // Use the project's version or define one directly
    options.javaModuleVersion = provider { version }
}

java {
    def version = project.findProperty('toolchain')
    if (!version) {
        version = jdkVersion
    } else if (version.strip() == 'skip')
        version = null
    if (version != null) {
        logger.info("Setting toolchain to {}", version)
        toolchain {
            languageVersion = JavaLanguageVersion.of(version)
        }
    }
    withSourcesJar()
    withJavadocJar()

    // Optional ControlsFX support
    java {
        registerFeature('controlsfx') {
            usingSourceSet(sourceSets.main)
        }
    }
}

javafx {
    version = 17
    modules = ["javafx.base",
               "javafx.controls",
               "javafx.graphics"]
    configuration = 'api'
}

tasks.named('test') {
    useJUnitPlatform()
}

/*
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
def strictJavadoc = findProperty('strictJavadoc')

tasks.withType(Javadoc).each { javadocTask ->
    if (!strictJavadoc) {
        javadocTask.options.addStringOption('Xdoclint:none', '-quiet')
    }
    javadocTask.options.encoding = 'UTF-8'
}


repositories {
    mavenCentral()
}

dependencies {
    api "org.slf4j:slf4j-api:2.0.0"

    // Optional ControlsFX support (used for notifications)
    controlsfxImplementation "org.controlsfx:controlsfx:11.1.2"

    testImplementation "org.junit.jupiter:junit-jupiter:5.10.0"
}